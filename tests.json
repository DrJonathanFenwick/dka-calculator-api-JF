{
	"info": {
		"_postman_id": "e21a63d3-1d02-44e0-acf0-606e604a5ece",
		"name": "/calculate testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14785026",
		"_collection_link": "https://universal-capsule-155462.postman.co/workspace/dka-calculator-api~e0a7b736-5f9f-4f56-881c-c2e0cad82ec4/collection/14785026-e21a63d3-1d02-44e0-acf0-606e604a5ece?action=share&source=collection_link&creator=14785026"
	},
	"item": [
		{
			"name": "Mild pH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"calculations\": {\r",
							"            \"severity\": {\r",
							"                \"val\": \"mild\",\r",
							"                \"formula\": \"pH [>=7.2 and <7.3] or bicarbonate [<15mmol/L] ==> severe<br>pH [>=7.1 and <7.2] or bicarbonate [<10mmol/L] ==> moderate<br>pH [>=6.5 and <7.1] or bicarbonate [<5mmol/L] ==> severe<br>(if bicarbonate and pH return different severity levels, most severe option is used)\",\r",
							"                \"working\": \"pH [7.2] is [>=7.2, <7.3] ==> mild\"\r",
							"            },\r",
							"            \"bolusVolume\": {\r",
							"                \"val\": 400,\r",
							"                \"mlsPerKg\": 10,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[10mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"750mL\",\r",
							"                \"working\": \"[10mL/kg] x [40.0kg] = 400mL\"\r",
							"            },\r",
							"            \"deficit\": {\r",
							"                \"percentage\": {\r",
							"                    \"val\": 5,\r",
							"                    \"formula\": \"Severity [mild or moderate] ==> 5%<br>Severity [severe] ==> 10%\",\r",
							"                    \"working\": \"Severity [mild] ==> 5%\"\r",
							"                },\r",
							"                \"volume\": {\r",
							"                    \"val\": 2000,\r",
							"                    \"formula\": \"[Deficit percentage] x [Patient weight] x 10\",\r",
							"                    \"limit\": \"3750 mL (for 5% deficit)\",\r",
							"                    \"working\": \"[5%] x [40.0 kg] x 10 = 2000 mL \",\r",
							"                    \"isCapped\": false\r",
							"                },\r",
							"                \"volumeLessBolus\": {\r",
							"                    \"bolusToSubtract\": 400,\r",
							"                    \"val\": 1600,\r",
							"                    \"formula\": \"[Deficit volume] - [10mL/kg bolus (only for non-shocked patients)]\",\r",
							"                    \"working\": \"[2000mL] - [400mL] = 1600mL\"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 33.333333333333336,\r",
							"                    \"formula\": \"[Deficit volume less bolus] รท [deficit replacement duration in hours]\",\r",
							"                    \"working\": \"[1600mL] รท [48 hours] = 33.3mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"maintenance\": {\r",
							"                \"volume\": {\r",
							"                    \"val\": 1900,\r",
							"                    \"formula\": \"1500 + [(Weight (kg) - 20) x 20]\",\r",
							"                    \"limit\": \"2600 mL\",\r",
							"                    \"working\": \"1500 + [(40.0kg - 20) x 20] = 1900mL \"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 79.16666666666667,\r",
							"                    \"formula\": \"[Daily maintenance volume] รท 24 hours\",\r",
							"                    \"working\": \"[1900mL] รท 24 hours = 79.2mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"startingFluidRate\": {\r",
							"                \"val\": 112.5,\r",
							"                \"formula\": \"[Deficit replacement rate] + [Maintenance rate]\",\r",
							"                \"working\": \"[33.3mL/hour] + [79.2mL/hour] = 112.5mL/hour\"\r",
							"            },\r",
							"            \"insulinRate\": {\r",
							"                \"val\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[Insulin rate (Units/kg/hour)] x [Patient weight]\",\r",
							"                \"limit\": \"3.75 Units/hour (for 0.05 Units/kg/hour)\",\r",
							"                \"working\": \"[0.05 Units/kg/hour] x [40.0kg] = 2.00 Units/hour\"\r",
							"            },\r",
							"            \"glucoseBolusVolume\": {\r",
							"                \"val\": 80,\r",
							"                \"mlsPerKg\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[2mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"150mL\",\r",
							"                \"working\": \"[2mL/kg] x [40.0kg] = 80mL\"\r",
							"            },\r",
							"            \"hhsBolusVolume\": {\r",
							"                \"val\": 800,\r",
							"                \"mlsPerKg\": 20,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[20mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"1500mL\",\r",
							"                \"working\": \"[20mL/kg] x [40.0kg] = 800mL\"\r",
							"            },\r",
							"            \"errors\": []\r",
							"        }\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 7.2,\r\n    \"weight\": 40,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Moderate pH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"calculations\": {\r",
							"            \"severity\": {\r",
							"                \"val\": \"moderate\",\r",
							"                \"formula\": \"pH [>=7.2 and <7.3] or bicarbonate [<15mmol/L] ==> severe<br>pH [>=7.1 and <7.2] or bicarbonate [<10mmol/L] ==> moderate<br>pH [>=6.5 and <7.1] or bicarbonate [<5mmol/L] ==> severe<br>(if bicarbonate and pH return different severity levels, most severe option is used)\",\r",
							"                \"working\": \"pH [7.1] is [>=7.1, <7.2] ==> moderate\"\r",
							"            },\r",
							"            \"bolusVolume\": {\r",
							"                \"val\": 400,\r",
							"                \"mlsPerKg\": 10,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[10mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"750mL\",\r",
							"                \"working\": \"[10mL/kg] x [40.0kg] = 400mL\"\r",
							"            },\r",
							"            \"deficit\": {\r",
							"                \"percentage\": {\r",
							"                    \"val\": 5,\r",
							"                    \"formula\": \"Severity [mild or moderate] ==> 5%<br>Severity [severe] ==> 10%\",\r",
							"                    \"working\": \"Severity [moderate] ==> 5%\"\r",
							"                },\r",
							"                \"volume\": {\r",
							"                    \"val\": 2000,\r",
							"                    \"formula\": \"[Deficit percentage] x [Patient weight] x 10\",\r",
							"                    \"limit\": \"3750 mL (for 5% deficit)\",\r",
							"                    \"working\": \"[5%] x [40.0 kg] x 10 = 2000 mL \",\r",
							"                    \"isCapped\": false\r",
							"                },\r",
							"                \"volumeLessBolus\": {\r",
							"                    \"bolusToSubtract\": 400,\r",
							"                    \"val\": 1600,\r",
							"                    \"formula\": \"[Deficit volume] - [10mL/kg bolus (only for non-shocked patients)]\",\r",
							"                    \"working\": \"[2000mL] - [400mL] = 1600mL\"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 33.333333333333336,\r",
							"                    \"formula\": \"[Deficit volume less bolus] รท [deficit replacement duration in hours]\",\r",
							"                    \"working\": \"[1600mL] รท [48 hours] = 33.3mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"maintenance\": {\r",
							"                \"volume\": {\r",
							"                    \"val\": 1900,\r",
							"                    \"formula\": \"1500 + [(Weight (kg) - 20) x 20]\",\r",
							"                    \"limit\": \"2600 mL\",\r",
							"                    \"working\": \"1500 + [(40.0kg - 20) x 20] = 1900mL \"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 79.16666666666667,\r",
							"                    \"formula\": \"[Daily maintenance volume] รท 24 hours\",\r",
							"                    \"working\": \"[1900mL] รท 24 hours = 79.2mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"startingFluidRate\": {\r",
							"                \"val\": 112.5,\r",
							"                \"formula\": \"[Deficit replacement rate] + [Maintenance rate]\",\r",
							"                \"working\": \"[33.3mL/hour] + [79.2mL/hour] = 112.5mL/hour\"\r",
							"            },\r",
							"            \"insulinRate\": {\r",
							"                \"val\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[Insulin rate (Units/kg/hour)] x [Patient weight]\",\r",
							"                \"limit\": \"3.75 Units/hour (for 0.05 Units/kg/hour)\",\r",
							"                \"working\": \"[0.05 Units/kg/hour] x [40.0kg] = 2.00 Units/hour\"\r",
							"            },\r",
							"            \"glucoseBolusVolume\": {\r",
							"                \"val\": 80,\r",
							"                \"mlsPerKg\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[2mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"150mL\",\r",
							"                \"working\": \"[2mL/kg] x [40.0kg] = 80mL\"\r",
							"            },\r",
							"            \"hhsBolusVolume\": {\r",
							"                \"val\": 800,\r",
							"                \"mlsPerKg\": 20,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[20mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"1500mL\",\r",
							"                \"working\": \"[20mL/kg] x [40.0kg] = 800mL\"\r",
							"            },\r",
							"            \"errors\": []\r",
							"        }\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 7.1,\r\n    \"weight\": 40,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Moderate pH, severe bicarb",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"calculations\": {\r",
							"            \"severity\": {\r",
							"                \"val\": \"severe\",\r",
							"                \"formula\": \"pH [>=7.2 and <7.3] or bicarbonate [<15mmol/L] ==> severe<br>pH [>=7.1 and <7.2] or bicarbonate [<10mmol/L] ==> moderate<br>pH [>=6.5 and <7.1] or bicarbonate [<5mmol/L] ==> severe<br>(if bicarbonate and pH return different severity levels, most severe option is used)\",\r",
							"                \"working\": \"pH [7.1] is [>=6.5, <7.1] or bicarbonate [4] is [<5mmol/L] ==> severe\"\r",
							"            },\r",
							"            \"bolusVolume\": {\r",
							"                \"val\": 400,\r",
							"                \"mlsPerKg\": 10,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[10mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"750mL\",\r",
							"                \"working\": \"[10mL/kg] x [40.0kg] = 400mL\"\r",
							"            },\r",
							"            \"deficit\": {\r",
							"                \"percentage\": {\r",
							"                    \"val\": 10,\r",
							"                    \"formula\": \"Severity [mild or moderate] ==> 5%<br>Severity [severe] ==> 10%\",\r",
							"                    \"working\": \"Severity [severe] ==> 10%\"\r",
							"                },\r",
							"                \"volume\": {\r",
							"                    \"val\": 4000,\r",
							"                    \"formula\": \"[Deficit percentage] x [Patient weight] x 10\",\r",
							"                    \"limit\": \"7500 mL (for 10% deficit)\",\r",
							"                    \"working\": \"[10%] x [40.0 kg] x 10 = 4000 mL \",\r",
							"                    \"isCapped\": false\r",
							"                },\r",
							"                \"volumeLessBolus\": {\r",
							"                    \"bolusToSubtract\": 400,\r",
							"                    \"val\": 3600,\r",
							"                    \"formula\": \"[Deficit volume] - [10mL/kg bolus (only for non-shocked patients)]\",\r",
							"                    \"working\": \"[4000mL] - [400mL] = 3600mL\"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 75,\r",
							"                    \"formula\": \"[Deficit volume less bolus] รท [deficit replacement duration in hours]\",\r",
							"                    \"working\": \"[3600mL] รท [48 hours] = 75.0mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"maintenance\": {\r",
							"                \"volume\": {\r",
							"                    \"val\": 1900,\r",
							"                    \"formula\": \"1500 + [(Weight (kg) - 20) x 20]\",\r",
							"                    \"limit\": \"2600 mL\",\r",
							"                    \"working\": \"1500 + [(40.0kg - 20) x 20] = 1900mL \"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 79.16666666666667,\r",
							"                    \"formula\": \"[Daily maintenance volume] รท 24 hours\",\r",
							"                    \"working\": \"[1900mL] รท 24 hours = 79.2mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"startingFluidRate\": {\r",
							"                \"val\": 154.16666666666669,\r",
							"                \"formula\": \"[Deficit replacement rate] + [Maintenance rate]\",\r",
							"                \"working\": \"[75.0mL/hour] + [79.2mL/hour] = 154.2mL/hour\"\r",
							"            },\r",
							"            \"insulinRate\": {\r",
							"                \"val\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[Insulin rate (Units/kg/hour)] x [Patient weight]\",\r",
							"                \"limit\": \"3.75 Units/hour (for 0.05 Units/kg/hour)\",\r",
							"                \"working\": \"[0.05 Units/kg/hour] x [40.0kg] = 2.00 Units/hour\"\r",
							"            },\r",
							"            \"glucoseBolusVolume\": {\r",
							"                \"val\": 80,\r",
							"                \"mlsPerKg\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[2mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"150mL\",\r",
							"                \"working\": \"[2mL/kg] x [40.0kg] = 80mL\"\r",
							"            },\r",
							"            \"hhsBolusVolume\": {\r",
							"                \"val\": 800,\r",
							"                \"mlsPerKg\": 20,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[20mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"1500mL\",\r",
							"                \"working\": \"[20mL/kg] x [40.0kg] = 800mL\"\r",
							"            },\r",
							"            \"errors\": []\r",
							"        }\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 7.1,\r\n    \"bicarbonate\": 4,\r\n    \"weight\": 40,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Severe pH",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"calculations\": {\r",
							"            \"severity\": {\r",
							"                \"val\": \"severe\",\r",
							"                \"formula\": \"pH [>=7.2 and <7.3] or bicarbonate [<15mmol/L] ==> severe<br>pH [>=7.1 and <7.2] or bicarbonate [<10mmol/L] ==> moderate<br>pH [>=6.5 and <7.1] or bicarbonate [<5mmol/L] ==> severe<br>(if bicarbonate and pH return different severity levels, most severe option is used)\",\r",
							"                \"working\": \"pH [6.8] is [>=6.5, <7.1] ==> severe\"\r",
							"            },\r",
							"            \"bolusVolume\": {\r",
							"                \"val\": 400,\r",
							"                \"mlsPerKg\": 10,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[10mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"750mL\",\r",
							"                \"working\": \"[10mL/kg] x [40.0kg] = 400mL\"\r",
							"            },\r",
							"            \"deficit\": {\r",
							"                \"percentage\": {\r",
							"                    \"val\": 10,\r",
							"                    \"formula\": \"Severity [mild or moderate] ==> 5%<br>Severity [severe] ==> 10%\",\r",
							"                    \"working\": \"Severity [severe] ==> 10%\"\r",
							"                },\r",
							"                \"volume\": {\r",
							"                    \"val\": 4000,\r",
							"                    \"formula\": \"[Deficit percentage] x [Patient weight] x 10\",\r",
							"                    \"limit\": \"7500 mL (for 10% deficit)\",\r",
							"                    \"working\": \"[10%] x [40.0 kg] x 10 = 4000 mL \",\r",
							"                    \"isCapped\": false\r",
							"                },\r",
							"                \"volumeLessBolus\": {\r",
							"                    \"bolusToSubtract\": 400,\r",
							"                    \"val\": 3600,\r",
							"                    \"formula\": \"[Deficit volume] - [10mL/kg bolus (only for non-shocked patients)]\",\r",
							"                    \"working\": \"[4000mL] - [400mL] = 3600mL\"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 75,\r",
							"                    \"formula\": \"[Deficit volume less bolus] รท [deficit replacement duration in hours]\",\r",
							"                    \"working\": \"[3600mL] รท [48 hours] = 75.0mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"maintenance\": {\r",
							"                \"volume\": {\r",
							"                    \"val\": 1900,\r",
							"                    \"formula\": \"1500 + [(Weight (kg) - 20) x 20]\",\r",
							"                    \"limit\": \"2600 mL\",\r",
							"                    \"working\": \"1500 + [(40.0kg - 20) x 20] = 1900mL \"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 79.16666666666667,\r",
							"                    \"formula\": \"[Daily maintenance volume] รท 24 hours\",\r",
							"                    \"working\": \"[1900mL] รท 24 hours = 79.2mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"startingFluidRate\": {\r",
							"                \"val\": 154.16666666666669,\r",
							"                \"formula\": \"[Deficit replacement rate] + [Maintenance rate]\",\r",
							"                \"working\": \"[75.0mL/hour] + [79.2mL/hour] = 154.2mL/hour\"\r",
							"            },\r",
							"            \"insulinRate\": {\r",
							"                \"val\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[Insulin rate (Units/kg/hour)] x [Patient weight]\",\r",
							"                \"limit\": \"3.75 Units/hour (for 0.05 Units/kg/hour)\",\r",
							"                \"working\": \"[0.05 Units/kg/hour] x [40.0kg] = 2.00 Units/hour\"\r",
							"            },\r",
							"            \"glucoseBolusVolume\": {\r",
							"                \"val\": 80,\r",
							"                \"mlsPerKg\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[2mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"150mL\",\r",
							"                \"working\": \"[2mL/kg] x [40.0kg] = 80mL\"\r",
							"            },\r",
							"            \"hhsBolusVolume\": {\r",
							"                \"val\": 800,\r",
							"                \"mlsPerKg\": 20,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[20mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"1500mL\",\r",
							"                \"working\": \"[20mL/kg] x [40.0kg] = 800mL\"\r",
							"            },\r",
							"            \"errors\": []\r",
							"        }\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 6.8,\r\n    \"weight\": 40,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Shocked",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"calculations\": {\r",
							"            \"severity\": {\r",
							"                \"val\": \"severe\",\r",
							"                \"formula\": \"pH [>=7.2 and <7.3] or bicarbonate [<15mmol/L] ==> severe<br>pH [>=7.1 and <7.2] or bicarbonate [<10mmol/L] ==> moderate<br>pH [>=6.5 and <7.1] or bicarbonate [<5mmol/L] ==> severe<br>(if bicarbonate and pH return different severity levels, most severe option is used)\",\r",
							"                \"working\": \"pH [6.8] is [>=6.5, <7.1] ==> severe\"\r",
							"            },\r",
							"            \"bolusVolume\": {\r",
							"                \"val\": 400,\r",
							"                \"mlsPerKg\": 10,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[10mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"750mL\",\r",
							"                \"working\": \"[10mL/kg] x [40.0kg] = 400mL\"\r",
							"            },\r",
							"            \"deficit\": {\r",
							"                \"percentage\": {\r",
							"                    \"val\": 10,\r",
							"                    \"formula\": \"Severity [mild or moderate] ==> 5%<br>Severity [severe] ==> 10%\",\r",
							"                    \"working\": \"Severity [severe] ==> 10%\"\r",
							"                },\r",
							"                \"volume\": {\r",
							"                    \"val\": 4000,\r",
							"                    \"formula\": \"[Deficit percentage] x [Patient weight] x 10\",\r",
							"                    \"limit\": \"7500 mL (for 10% deficit)\",\r",
							"                    \"working\": \"[10%] x [40.0 kg] x 10 = 4000 mL \",\r",
							"                    \"isCapped\": false\r",
							"                },\r",
							"                \"volumeLessBolus\": {\r",
							"                    \"bolusToSubtract\": 0,\r",
							"                    \"val\": 4000,\r",
							"                    \"formula\": \"[Deficit volume] - [10mL/kg bolus (only for non-shocked patients)]\",\r",
							"                    \"working\": \"[4000mL] - [0mL] = 4000mL\"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 83.33333333333333,\r",
							"                    \"formula\": \"[Deficit volume less bolus] รท [deficit replacement duration in hours]\",\r",
							"                    \"working\": \"[4000mL] รท [48 hours] = 83.3mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"maintenance\": {\r",
							"                \"volume\": {\r",
							"                    \"val\": 1900,\r",
							"                    \"formula\": \"1500 + [(Weight (kg) - 20) x 20]\",\r",
							"                    \"limit\": \"2600 mL\",\r",
							"                    \"working\": \"1500 + [(40.0kg - 20) x 20] = 1900mL \"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 79.16666666666667,\r",
							"                    \"formula\": \"[Daily maintenance volume] รท 24 hours\",\r",
							"                    \"working\": \"[1900mL] รท 24 hours = 79.2mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"startingFluidRate\": {\r",
							"                \"val\": 162.5,\r",
							"                \"formula\": \"[Deficit replacement rate] + [Maintenance rate]\",\r",
							"                \"working\": \"[83.3mL/hour] + [79.2mL/hour] = 162.5mL/hour\"\r",
							"            },\r",
							"            \"insulinRate\": {\r",
							"                \"val\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[Insulin rate (Units/kg/hour)] x [Patient weight]\",\r",
							"                \"limit\": \"3.75 Units/hour (for 0.05 Units/kg/hour)\",\r",
							"                \"working\": \"[0.05 Units/kg/hour] x [40.0kg] = 2.00 Units/hour\"\r",
							"            },\r",
							"            \"glucoseBolusVolume\": {\r",
							"                \"val\": 80,\r",
							"                \"mlsPerKg\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[2mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"150mL\",\r",
							"                \"working\": \"[2mL/kg] x [40.0kg] = 80mL\"\r",
							"            },\r",
							"            \"hhsBolusVolume\": {\r",
							"                \"val\": 800,\r",
							"                \"mlsPerKg\": 20,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[20mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"1500mL\",\r",
							"                \"working\": \"[20mL/kg] x [40.0kg] = 800mL\"\r",
							"            },\r",
							"            \"errors\": []\r",
							"        }\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 6.8,\r\n    \"weight\": 40,\r\n    \"shockPresent\": true,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Insulin 0.1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"calculations\": {\r",
							"            \"severity\": {\r",
							"                \"val\": \"severe\",\r",
							"                \"formula\": \"pH [>=7.2 and <7.3] or bicarbonate [<15mmol/L] ==> severe<br>pH [>=7.1 and <7.2] or bicarbonate [<10mmol/L] ==> moderate<br>pH [>=6.5 and <7.1] or bicarbonate [<5mmol/L] ==> severe<br>(if bicarbonate and pH return different severity levels, most severe option is used)\",\r",
							"                \"working\": \"pH [6.8] is [>=6.5, <7.1] ==> severe\"\r",
							"            },\r",
							"            \"bolusVolume\": {\r",
							"                \"val\": 400,\r",
							"                \"mlsPerKg\": 10,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[10mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"750mL\",\r",
							"                \"working\": \"[10mL/kg] x [40.0kg] = 400mL\"\r",
							"            },\r",
							"            \"deficit\": {\r",
							"                \"percentage\": {\r",
							"                    \"val\": 10,\r",
							"                    \"formula\": \"Severity [mild or moderate] ==> 5%<br>Severity [severe] ==> 10%\",\r",
							"                    \"working\": \"Severity [severe] ==> 10%\"\r",
							"                },\r",
							"                \"volume\": {\r",
							"                    \"val\": 4000,\r",
							"                    \"formula\": \"[Deficit percentage] x [Patient weight] x 10\",\r",
							"                    \"limit\": \"7500 mL (for 10% deficit)\",\r",
							"                    \"working\": \"[10%] x [40.0 kg] x 10 = 4000 mL \",\r",
							"                    \"isCapped\": false\r",
							"                },\r",
							"                \"volumeLessBolus\": {\r",
							"                    \"bolusToSubtract\": 0,\r",
							"                    \"val\": 4000,\r",
							"                    \"formula\": \"[Deficit volume] - [10mL/kg bolus (only for non-shocked patients)]\",\r",
							"                    \"working\": \"[4000mL] - [0mL] = 4000mL\"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 83.33333333333333,\r",
							"                    \"formula\": \"[Deficit volume less bolus] รท [deficit replacement duration in hours]\",\r",
							"                    \"working\": \"[4000mL] รท [48 hours] = 83.3mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"maintenance\": {\r",
							"                \"volume\": {\r",
							"                    \"val\": 1900,\r",
							"                    \"formula\": \"1500 + [(Weight (kg) - 20) x 20]\",\r",
							"                    \"limit\": \"2600 mL\",\r",
							"                    \"working\": \"1500 + [(40.0kg - 20) x 20] = 1900mL \"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 79.16666666666667,\r",
							"                    \"formula\": \"[Daily maintenance volume] รท 24 hours\",\r",
							"                    \"working\": \"[1900mL] รท 24 hours = 79.2mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"startingFluidRate\": {\r",
							"                \"val\": 162.5,\r",
							"                \"formula\": \"[Deficit replacement rate] + [Maintenance rate]\",\r",
							"                \"working\": \"[83.3mL/hour] + [79.2mL/hour] = 162.5mL/hour\"\r",
							"            },\r",
							"            \"insulinRate\": {\r",
							"                \"val\": 4,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[Insulin rate (Units/kg/hour)] x [Patient weight]\",\r",
							"                \"limit\": \"7.5 Units/hour (for 0.1 Units/kg/hour)\",\r",
							"                \"working\": \"[0.1 Units/kg/hour] x [40.0kg] = 4.00 Units/hour\"\r",
							"            },\r",
							"            \"glucoseBolusVolume\": {\r",
							"                \"val\": 80,\r",
							"                \"mlsPerKg\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[2mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"150mL\",\r",
							"                \"working\": \"[2mL/kg] x [40.0kg] = 80mL\"\r",
							"            },\r",
							"            \"hhsBolusVolume\": {\r",
							"                \"val\": 800,\r",
							"                \"mlsPerKg\": 20,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[20mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"1500mL\",\r",
							"                \"working\": \"[20mL/kg] x [40.0kg] = 800mL\"\r",
							"            },\r",
							"            \"errors\": []\r",
							"        }\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 6.8,\r\n    \"weight\": 40,\r\n    \"shockPresent\": true,\r\n    \"insulinRate\": 0.1,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Weight 100kg",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = \"If weight limit override is not selected, weight must be within 2 standard deviations of the mean for age (upper limit 75kg) (range 37.325kg to 75kg for male patient aged 14 years and 7 months).\"\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 6.8,\r\n    \"weight\": 100,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Weight outside age range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = \"If weight limit override is not selected, weight must be within 2 standard deviations of the mean for age (upper limit 75kg) (range 12.062kg to 18.989kg for male patient aged 3 years and 2 months).\"\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 6.8,\r\n    \"weight\": 50,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 3,\r\n    \"patientAgeMonths\": 38,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Weight 100kg Override",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"calculations\": {\r",
							"            \"severity\": {\r",
							"                \"val\": \"severe\",\r",
							"                \"formula\": \"pH [>=7.2 and <7.3] or bicarbonate [<15mmol/L] ==> severe<br>pH [>=7.1 and <7.2] or bicarbonate [<10mmol/L] ==> moderate<br>pH [>=6.5 and <7.1] or bicarbonate [<5mmol/L] ==> severe<br>(if bicarbonate and pH return different severity levels, most severe option is used)\",\r",
							"                \"working\": \"pH [6.8] is [>=6.5, <7.1] ==> severe\"\r",
							"            },\r",
							"            \"bolusVolume\": {\r",
							"                \"val\": 750,\r",
							"                \"mlsPerKg\": 10,\r",
							"                \"isCapped\": true,\r",
							"                \"formula\": \"[10mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"750mL\",\r",
							"                \"working\": \"[10mL/kg] x [100.0kg] = 750mL\"\r",
							"            },\r",
							"            \"deficit\": {\r",
							"                \"percentage\": {\r",
							"                    \"val\": 10,\r",
							"                    \"formula\": \"Severity [mild or moderate] ==> 5%<br>Severity [severe] ==> 10%\",\r",
							"                    \"working\": \"Severity [severe] ==> 10%\"\r",
							"                },\r",
							"                \"volume\": {\r",
							"                    \"val\": 7500,\r",
							"                    \"formula\": \"[Deficit percentage] x [Patient weight] x 10\",\r",
							"                    \"limit\": \"7500 mL (for 10% deficit)\",\r",
							"                    \"working\": \"[10%] x [100.0 kg] x 10 = 10000 mL (exceeds limit)\",\r",
							"                    \"isCapped\": true\r",
							"                },\r",
							"                \"volumeLessBolus\": {\r",
							"                    \"bolusToSubtract\": 750,\r",
							"                    \"val\": 6750,\r",
							"                    \"formula\": \"[Deficit volume] - [10mL/kg bolus (only for non-shocked patients)]\",\r",
							"                    \"working\": \"[7500mL] - [750mL] = 6750mL\"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 140.625,\r",
							"                    \"formula\": \"[Deficit volume less bolus] รท [deficit replacement duration in hours]\",\r",
							"                    \"working\": \"[6750mL] รท [48 hours] = 140.6mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"maintenance\": {\r",
							"                \"volume\": {\r",
							"                    \"val\": 2600,\r",
							"                    \"formula\": \"1500 + [(Weight (kg) - 20) x 20]\",\r",
							"                    \"limit\": \"2600 mL\",\r",
							"                    \"working\": \"1500 + [(100.0kg - 20) x 20] = 3100mL (exceeds limit)\"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 108.33333333333333,\r",
							"                    \"formula\": \"[Daily maintenance volume] รท 24 hours\",\r",
							"                    \"working\": \"[2600mL] รท 24 hours = 108.3mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"startingFluidRate\": {\r",
							"                \"val\": 248.95833333333331,\r",
							"                \"formula\": \"[Deficit replacement rate] + [Maintenance rate]\",\r",
							"                \"working\": \"[140.6mL/hour] + [108.3mL/hour] = 249.0mL/hour\"\r",
							"            },\r",
							"            \"insulinRate\": {\r",
							"                \"val\": 3.75,\r",
							"                \"isCapped\": true,\r",
							"                \"formula\": \"[Insulin rate (Units/kg/hour)] x [Patient weight]\",\r",
							"                \"limit\": \"3.75 Units/hour (for 0.05 Units/kg/hour)\",\r",
							"                \"working\": \"[0.05 Units/kg/hour] x [100.0kg] = 3.75 Units/hour\"\r",
							"            },\r",
							"            \"glucoseBolusVolume\": {\r",
							"                \"val\": 150,\r",
							"                \"mlsPerKg\": 2,\r",
							"                \"isCapped\": true,\r",
							"                \"formula\": \"[2mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"150mL\",\r",
							"                \"working\": \"[2mL/kg] x [100.0kg] = 150mL\"\r",
							"            },\r",
							"            \"hhsBolusVolume\": {\r",
							"                \"val\": 1500,\r",
							"                \"mlsPerKg\": 20,\r",
							"                \"isCapped\": true,\r",
							"                \"formula\": \"[20mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"1500mL\",\r",
							"                \"working\": \"[20mL/kg] x [100.0kg] = 1500mL\"\r",
							"            },\r",
							"            \"errors\": []\r",
							"        }\r",
							"    }\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 6.8,\r\n    \"weight\": 100,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": true,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Low ketones",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"errors\": [\r",
							"            \"Ketones of 1mmol/L are below the diagnostic threshold of 3mmol/L for DKA.\"\r",
							"        ]\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 7.1,\r\n    \"ketones\": 1,\r\n    \"weight\": 40,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "pH high",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"errors\": [\r",
							"            {\r",
							"                \"msg\": \"pH of 7.35 and bicarbonate of undefined mmol/L does not meet the diagnostic threshold for DKA.\"\r",
							"            },\r",
							"            {\r",
							"                \"msg\": \"Unable to select deficit percentage using severity rating [false]\"\r",
							"            },\r",
							"            {\r",
							"                \"msg\": \"Unable to select deficit volume cap using deficit percentage [false].\"\r",
							"            },\r",
							"            {\r",
							"                \"msg\": \"Unable to generate deficit volume limit string using deficit percentage [false].\"\r",
							"            }\r",
							"        ]\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 7.35,\r\n    \"weight\": 40,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Legal agreement false",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"errors\": [\r",
							"            {\r",
							"                \"type\": \"field\",\r",
							"                \"value\": false,\r",
							"                \"msg\": \"You must agree to the legal disclaimer.\",\r",
							"                \"path\": \"legalAgreement\",\r",
							"                \"location\": \"body\"\r",
							"            }\r",
							"        ]\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": false,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 7.25,\r\n    \"weight\": 40,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Missing insulin route",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"errors\": [\r",
							"            {\r",
							"                \"type\": \"field\",\r",
							"                \"value\": \"\",\r",
							"                \"msg\": \"Insulin delivery method field must be data type [string], containing only alpha characters.\",\r",
							"                \"path\": \"insulinDeliveryMethod\",\r",
							"                \"location\": \"body\"\r",
							"            }\r",
							"        ]\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 7.25,\r\n    \"weight\": 40,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": true,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Female patient at lower limit for weight",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"calculations\": {\r",
							"            \"severity\": {\r",
							"                \"val\": \"mild\",\r",
							"                \"formula\": \"pH [>=7.2 and <7.3] or bicarbonate [<15mmol/L] ==> severe<br>pH [>=7.1 and <7.2] or bicarbonate [<10mmol/L] ==> moderate<br>pH [>=6.5 and <7.1] or bicarbonate [<5mmol/L] ==> severe<br>(if bicarbonate and pH return different severity levels, most severe option is used)\",\r",
							"                \"working\": \"pH [7.25] is [>=7.2 and <7.3] ==> mild\"\r",
							"            },\r",
							"            \"bolusVolume\": {\r",
							"                \"val\": 100,\r",
							"                \"mlsPerKg\": 10,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[10mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"750mL\",\r",
							"                \"working\": \"[10mL/kg] x [10.0kg] = 100mL \"\r",
							"            },\r",
							"            \"deficit\": {\r",
							"                \"percentage\": {\r",
							"                    \"val\": 5,\r",
							"                    \"formula\": \"Severity [mild or moderate] ==> 5%<br>Severity [severe] ==> 10%\",\r",
							"                    \"working\": \"Severity [mild] ==> 5%\"\r",
							"                },\r",
							"                \"volume\": {\r",
							"                    \"val\": 500,\r",
							"                    \"formula\": \"[Deficit percentage] x [Patient weight] x 10\",\r",
							"                    \"limit\": \"3750 mL (for 5% deficit)\",\r",
							"                    \"working\": \"[5%] x [10.0 kg] x 10 = 500mL \",\r",
							"                    \"isCapped\": false\r",
							"                },\r",
							"                \"volumeLessBolus\": {\r",
							"                    \"bolusToSubtract\": 100,\r",
							"                    \"val\": 400,\r",
							"                    \"formula\": \"[Deficit volume] - [10mL/kg bolus (only for non-shocked patients)]\",\r",
							"                    \"working\": \"[500mL] - [100mL] = 400mL\"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 8.333333333333334,\r",
							"                    \"formula\": \"[Deficit volume less bolus] รท [deficit replacement duration in hours]\",\r",
							"                    \"working\": \"[400mL] รท [48 hours] = 8.3mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"maintenance\": {\r",
							"                \"volume\": {\r",
							"                    \"val\": 1000,\r",
							"                    \"formula\": \"1000 + [(Weight (kg) - 10) x 50]\",\r",
							"                    \"limit\": \"2600 mL\",\r",
							"                    \"working\": \"1000 + [(10.0kg - 10) x 50] = 1000mL \"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 41.666666666666664,\r",
							"                    \"formula\": \"[Daily maintenance volume] รท 24 hours\",\r",
							"                    \"working\": \"[1000mL] รท 24 hours = 41.7mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"startingFluidRate\": {\r",
							"                \"val\": 50,\r",
							"                \"formula\": \"[Deficit replacement rate] + [Maintenance rate]\",\r",
							"                \"working\": \"[8.3mL/hour] + [41.7mL/hour] = 50.0mL/hour\"\r",
							"            },\r",
							"            \"insulinRate\": {\r",
							"                \"val\": 0.5,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[Insulin rate (Units/kg/hour)] x [Patient weight]\",\r",
							"                \"limit\": \"3.75 Units/hour (for 0.05 Units/kg/hour)\",\r",
							"                \"working\": \"[0.05 Units/kg/hour] x [10.0kg] = 0.50 Units/hour \"\r",
							"            },\r",
							"            \"glucoseBolusVolume\": {\r",
							"                \"val\": 20,\r",
							"                \"mlsPerKg\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[2mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"150mL\",\r",
							"                \"working\": \"[2mL/kg] x [10.0kg] = 20mL \"\r",
							"            },\r",
							"            \"hhsBolusVolume\": {\r",
							"                \"val\": 200,\r",
							"                \"mlsPerKg\": 20,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[20mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"1500mL\",\r",
							"                \"working\": \"[20mL/kg] x [10.0kg] = 200mL \"\r",
							"            },\r",
							"            \"errors\": []\r",
							"        }\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"female\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 7.25,\r\n    \"weight\": 10,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 2,\r\n    \"patientAgeMonths\": 25,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "With optional biochemistry",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"calculations\": {\r",
							"            \"severity\": {\r",
							"                \"val\": \"moderate\",\r",
							"                \"formula\": \"pH [>=7.2 and <7.3] or bicarbonate [<15mmol/L] ==> severe<br>pH [>=7.1 and <7.2] or bicarbonate [<10mmol/L] ==> moderate<br>pH [>=6.5 and <7.1] or bicarbonate [<5mmol/L] ==> severe<br>(if bicarbonate and pH return different severity levels, most severe option is used)\",\r",
							"                \"working\": \"pH [7.1] is [>=7.1 and <7.2] or bicarbonate [11] is [<10mmol/L] ==> moderate\"\r",
							"            },\r",
							"            \"bolusVolume\": {\r",
							"                \"val\": 400,\r",
							"                \"mlsPerKg\": 10,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[10mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"750mL\",\r",
							"                \"working\": \"[10mL/kg] x [40.0kg] = 400mL \"\r",
							"            },\r",
							"            \"deficit\": {\r",
							"                \"percentage\": {\r",
							"                    \"val\": 5,\r",
							"                    \"formula\": \"Severity [mild or moderate] ==> 5%<br>Severity [severe] ==> 10%\",\r",
							"                    \"working\": \"Severity [moderate] ==> 5%\"\r",
							"                },\r",
							"                \"volume\": {\r",
							"                    \"val\": 2000,\r",
							"                    \"formula\": \"[Deficit percentage] x [Patient weight] x 10\",\r",
							"                    \"limit\": \"3750 mL (for 5% deficit)\",\r",
							"                    \"working\": \"[5%] x [40.0 kg] x 10 = 2000mL \",\r",
							"                    \"isCapped\": false\r",
							"                },\r",
							"                \"volumeLessBolus\": {\r",
							"                    \"bolusToSubtract\": 400,\r",
							"                    \"val\": 1600,\r",
							"                    \"formula\": \"[Deficit volume] - [10mL/kg bolus (only for non-shocked patients)]\",\r",
							"                    \"working\": \"[2000mL] - [400mL] = 1600mL\"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 33.333333333333336,\r",
							"                    \"formula\": \"[Deficit volume less bolus] รท [deficit replacement duration in hours]\",\r",
							"                    \"working\": \"[1600mL] รท [48 hours] = 33.3mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"maintenance\": {\r",
							"                \"volume\": {\r",
							"                    \"val\": 1900,\r",
							"                    \"formula\": \"1500 + [(Weight (kg) - 20) x 20]\",\r",
							"                    \"limit\": \"2600 mL\",\r",
							"                    \"working\": \"1500 + [(40.0kg - 20) x 20] = 1900mL \"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 79.16666666666667,\r",
							"                    \"formula\": \"[Daily maintenance volume] รท 24 hours\",\r",
							"                    \"working\": \"[1900mL] รท 24 hours = 79.2mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"startingFluidRate\": {\r",
							"                \"val\": 112.5,\r",
							"                \"formula\": \"[Deficit replacement rate] + [Maintenance rate]\",\r",
							"                \"working\": \"[33.3mL/hour] + [79.2mL/hour] = 112.5mL/hour\"\r",
							"            },\r",
							"            \"insulinRate\": {\r",
							"                \"val\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[Insulin rate (Units/kg/hour)] x [Patient weight]\",\r",
							"                \"limit\": \"3.75 Units/hour (for 0.05 Units/kg/hour)\",\r",
							"                \"working\": \"[0.05 Units/kg/hour] x [40.0kg] = 2.00 Units/hour \"\r",
							"            },\r",
							"            \"glucoseBolusVolume\": {\r",
							"                \"val\": 80,\r",
							"                \"mlsPerKg\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[2mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"150mL\",\r",
							"                \"working\": \"[2mL/kg] x [40.0kg] = 80mL \"\r",
							"            },\r",
							"            \"hhsBolusVolume\": {\r",
							"                \"val\": 800,\r",
							"                \"mlsPerKg\": 20,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[20mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"1500mL\",\r",
							"                \"working\": \"[20mL/kg] x [40.0kg] = 800mL \"\r",
							"            },\r",
							"            \"errors\": []\r",
							"        }\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 7.1,\r\n    \"ketones\": 6.3,\r\n    \"bicarbonate\": 11,\r\n    \"glucose\": 28,\r\n    \"weight\": 40,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 14,\r\n    \"patientAgeMonths\": 175,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		},
		{
			"name": "Age 3 months",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response matches expected structure excluding specific fields\", function () {\r",
							"    const expectedResponse = {\r",
							"        \"calculations\": {\r",
							"            \"severity\": {\r",
							"                \"val\": \"mild\",\r",
							"                \"formula\": \"pH [>=7.2 and <7.3] or bicarbonate [<15mmol/L] ==> severe<br>pH [>=7.1 and <7.2] or bicarbonate [<10mmol/L] ==> moderate<br>pH [>=6.5 and <7.1] or bicarbonate [<5mmol/L] ==> severe<br>(if bicarbonate and pH return different severity levels, most severe option is used)\",\r",
							"                \"working\": \"pH [7.2] is [>=7.2 and <7.3] ==> mild\"\r",
							"            },\r",
							"            \"bolusVolume\": {\r",
							"                \"val\": 50,\r",
							"                \"mlsPerKg\": 10,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[10mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"750mL\",\r",
							"                \"working\": \"[10mL/kg] x [5.0kg] = 50mL \"\r",
							"            },\r",
							"            \"deficit\": {\r",
							"                \"percentage\": {\r",
							"                    \"val\": 5,\r",
							"                    \"formula\": \"Severity [mild or moderate] ==> 5%<br>Severity [severe] ==> 10%\",\r",
							"                    \"working\": \"Severity [mild] ==> 5%\"\r",
							"                },\r",
							"                \"volume\": {\r",
							"                    \"val\": 250,\r",
							"                    \"formula\": \"[Deficit percentage] x [Patient weight] x 10\",\r",
							"                    \"limit\": \"3750 mL (for 5% deficit)\",\r",
							"                    \"working\": \"[5%] x [5.0 kg] x 10 = 250mL \",\r",
							"                    \"isCapped\": false\r",
							"                },\r",
							"                \"volumeLessBolus\": {\r",
							"                    \"bolusToSubtract\": 50,\r",
							"                    \"val\": 200,\r",
							"                    \"formula\": \"[Deficit volume] - [10mL/kg bolus (only for non-shocked patients)]\",\r",
							"                    \"working\": \"[250mL] - [50mL] = 200mL\"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 4.166666666666667,\r",
							"                    \"formula\": \"[Deficit volume less bolus] รท [deficit replacement duration in hours]\",\r",
							"                    \"working\": \"[200mL] รท [48 hours] = 4.2mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"maintenance\": {\r",
							"                \"volume\": {\r",
							"                    \"val\": 500,\r",
							"                    \"formula\": \"[Weight (kg)] x 100\",\r",
							"                    \"limit\": \"2600 mL\",\r",
							"                    \"working\": \"[5.0kg] x 100 = 500mL \"\r",
							"                },\r",
							"                \"rate\": {\r",
							"                    \"val\": 20.833333333333332,\r",
							"                    \"formula\": \"[Daily maintenance volume] รท 24 hours\",\r",
							"                    \"working\": \"[500mL] รท 24 hours = 20.8mL/hour\"\r",
							"                }\r",
							"            },\r",
							"            \"startingFluidRate\": {\r",
							"                \"val\": 25,\r",
							"                \"formula\": \"[Deficit replacement rate] + [Maintenance rate]\",\r",
							"                \"working\": \"[4.2mL/hour] + [20.8mL/hour] = 25.0mL/hour\"\r",
							"            },\r",
							"            \"insulinRate\": {\r",
							"                \"val\": 0.25,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[Insulin rate (Units/kg/hour)] x [Patient weight]\",\r",
							"                \"limit\": \"3.75 Units/hour (for 0.05 Units/kg/hour)\",\r",
							"                \"working\": \"[0.05 Units/kg/hour] x [5.0kg] = 0.25 Units/hour \"\r",
							"            },\r",
							"            \"glucoseBolusVolume\": {\r",
							"                \"val\": 10,\r",
							"                \"mlsPerKg\": 2,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[2mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"150mL\",\r",
							"                \"working\": \"[2mL/kg] x [5.0kg] = 10mL \"\r",
							"            },\r",
							"            \"hhsBolusVolume\": {\r",
							"                \"val\": 100,\r",
							"                \"mlsPerKg\": 20,\r",
							"                \"isCapped\": false,\r",
							"                \"formula\": \"[20mL/kg] x [Patient weight (kg)]\",\r",
							"                \"limit\": \"1500mL\",\r",
							"                \"working\": \"[20mL/kg] x [5.0kg] = 100mL \"\r",
							"            },\r",
							"            \"errors\": []\r",
							"        }\r",
							"    }\r",
							"\r",
							"    const actualResponse = pm.response.json();\r",
							"\r",
							"    function removeFields(obj, fields) {\r",
							"        fields.forEach(field => {\r",
							"            if (obj.hasOwnProperty(field)) {\r",
							"                delete obj[field];\r",
							"            }\r",
							"        });\r",
							"\r",
							"        for (let key in obj) {\r",
							"            if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {\r",
							"                removeFields(obj[key], fields);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"\r",
							"    removeFields(actualResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"    removeFields(expectedResponse, [\"formula\", \"limit\", \"working\", \"auditID\"]);\r",
							"\r",
							"    pm.expect(actualResponse).to.deep.equal(expectedResponse);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Get the current date and time\r",
							"let now = new Date();\r",
							"\r",
							"// Convert it to ISO 8601 format (UTC string)\r",
							"let utcString = now.toISOString();\r",
							"\r",
							"// Log the UTC string for debugging\r",
							"console.log(\"Current UTC datetime:\", utcString);\r",
							"\r",
							"// Set the UTC string as an environment variable\r",
							"pm.environment.set(\"currentUtcDatetime\", utcString);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"legalAgreement\": true,\r\n    \"patientSex\": \"male\",\r\n    \"patientPostcode\": \"BS419DL\",\r\n    \"protocolStartDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"pH\": 7.2,\r\n    \"weight\": 5,\r\n    \"shockPresent\": false,\r\n    \"insulinRate\": 0.05,\r\n    \"preExistingDiabetes\": false,\r\n    \"insulinDeliveryMethod\": \"\",\r\n    \"episodeType\": \"test\",\r\n    \"region\": \"Test region\",\r\n    \"centre\": \"Test centre\",\r\n    \"ethnicGroup\": \"Test ethnicGroup\",\r\n    \"ethnicSubgroup\": \"test ethnicSubgroup\",\r\n    \"preventableFactors\": [\r\n        \"No\"\r\n    ],\r\n    \"auditID\": \"\",\r\n    \"patientHash\": \"7c7b77411dd4e623ce9a51dfc40db461fc0f1d10f6f3e03a21bf04ea1a17d2c3\",\r\n    \"patientAge\": 0,\r\n    \"patientAgeMonths\": 3,\r\n    \"weightLimitOverride\": false,\r\n    \"appVersion\": \"Postman testing\",\r\n    \"clientDatetime\": \"{{currentUtcDatetime}}\",\r\n    \"clientUseragent\": \"Postman\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.dka-calculator.co.uk/calculate",
					"protocol": "https",
					"host": [
						"api",
						"dka-calculator",
						"co",
						"uk"
					],
					"path": [
						"calculate"
					]
				}
			},
			"response": []
		}
	]
}